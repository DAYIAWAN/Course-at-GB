/*
Задача:
	— Создать класс Поток, содержащий в себе список УчебныхГрупп и реализующий интерфейс Iterable;
	— Создать класс StreamComparator, реализующий сравнение количества групп, входящих в Поток;
	— Создать класс ПотокСервис, добавив в него метод сортировки списка потоков, используя созданный StreamComparator;
	— Модифицировать класс Контроллер, добавив в него созданный сервис;
	— Модифицировать класс Контроллер, добавив в него метод, сортирующий
	список потоков, путём вызова созданного сервиса.
*/

import java.util.*;

class УчебнаяГруппа {
    private String название; // Поле для хранения названия учебной группы

    public УчебнаяГруппа(String название) {
        this.название = название; // Конструктор класса, принимает название и инициализирует поле названия
    }

    public String getНазвание() {
        return название; // Геттер для получения названия учебной группы
    }

    public String toString() {
        return название; // Переопределение метода toString() для удобного вывода названия группы
    }
}

class Поток implements Iterable<УчебнаяГруппа> {
    private List<УчебнаяГруппа> учебныеГруппы; // Поле для хранения списка учебных групп

    public Поток(List<УчебнаяГруппа> учебныеГруппы) {
        this.учебныеГруппы = учебныеГруппы; // Конструктор класса, принимает список учебных групп и инициализирует поле
    }

    @Override
    public Iterator<УчебнаяГруппа> iterator() {
        return учебныеГруппы.iterator(); // Реализация метода iterator() для перебора учебных групп
    }
}

class StreamComparator implements Comparator<Поток> {
    @Override
    public int compare(Поток stream1, Поток stream2) {
        return stream2.size() - stream1.size(); // Реализация метода сравнения для определения количества групп в потоке
    }
}

class ПотокСервис {
    public void сортировкаПотоков(List<Поток> потоки) {
        потоки.sort(new StreamComparator()); // Метод для сортировки списка потоков с использованием StreamComparator
    }
}

class Контроллер {
    private ПотокСервис потокСервис; // Поле для хранения сервиса для работы с потоками

    public Контроллер(ПотокСервис потокСервис) {
        this.потокСервис = потокСервис; // Конструктор класса, принимает ПотокСервис и инициализирует поле
    }

    public void сортировкаПотоков(List<Поток> потоки) {
        потокСервис.сортировкаПотоков(потоки); // Метод для вызова сортировки потоков через потоковый сервис
    }
}

public class Main {
    public static void main(String[] args) {
        УчебнаяГруппа группа1 = new УчебнаяГруппа("Группа 1"); // Создание учебных групп
        УчебнаяГруппа группа2 = new УчебнаяГруппа("Группа 2");
        УчебнаяГруппа группа3 = new УчебнаяГруппа("Группа 3");
        УчебнаяГруппа группа4 = new УчебнаяГруппа("Группа 4");

        List<УчебнаяГруппа> поток1 = Arrays.asList(группа1, группа2, группа3); // Создание списков групп для каждого потока
        List<УчебнаяГруппа> поток2 = Arrays.asList(группа4, группа1, группа3, группа2);
        List<УчебнаяГруппа> поток3 = Arrays.asList(группа3, группа2, группа1);

        Поток потокA = new Поток(поток1); // Создание объектов класса Поток с соответствующими списками групп
        Поток потокB = new Поток(поток2);
        Поток потокC = new Поток(поток3);

        List<Поток> потоки = new ArrayList<>(Arrays.asList(потокA, потокB, потокC)); // Создание списка потоков

        ПотокСервис потокСервис = new ПотокСервис(); // Создание объекта потокового сервиса
        Контроллер контроллер = new Контроллер(потокСервис); // Создание объекта контроллера с передачей сервиса

        // Сортировка списка потоков
        контроллер.сортировкаПотоков(потоки);

        // Вывод отсортированного списка потоков
        for (Поток поток : потоки) {
            System.out.println(поток);
        }
    }
}
