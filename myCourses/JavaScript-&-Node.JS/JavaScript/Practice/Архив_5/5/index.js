class BinarySearch {
    constructor(array) {
        this.array = array;
    }

    find(target) {
        let left = 0;
        let right = this.array.length - 1;

        while (left <= right) {
            const middle = Math.floor((left + right) / 2);

            if (this.array[middle] === target) {
                return middle; // Элемент найден, возвращаем индекс
            }

            if (this.array[middle] < target) {
                left = middle + 1; // Искомый элемент в правой половине
            } else {
                right = middle - 1; // Искомый элемент в левой половине
            }
        }

        return -1; // Элемент не найден
    }
}

// Пример использования
const sortedArray = [1, 3, 4, 6, 7, 8, 10, 13, 14];
const targetNumber = 7;

const search = new BinarySearch(sortedArray);
const result = search.find(targetNumber);

console.log(result); // Ожидаемый вывод: 4

/*
Объяснение
Класс BinarySearch:

Инициализируется отсортированным массивом, переданным через конструктор.
Содержит метод find(target), который реализует бинарный поиск.
Алгоритм поиска:

Определяются начальные границы массива: left (левая граница) и right (правая граница).
Вычисляется середина массива: middle = Math.floor((left + right) / 2).
Проверяется, равен ли элемент в середине искомому. Если равен, возвращается индекс.
Если искомое число меньше среднего элемента, поиск продолжается в левой половине массива, иначе — в правой.
Если границы пересекаются (left > right), то элемент отсутствует, и возвращается -1.
Преимущества ООП подхода:

Класс позволяет легко масштабировать решение, добавляя дополнительные методы (например, проверка входных данных или сохранение истории поиска).
Удобство повторного использования объекта.
Пример:

Для массива [1, 3, 4, 6, 7, 8, 10, 13, 14] и числа 7, алгоритм находит индекс 4.
*/